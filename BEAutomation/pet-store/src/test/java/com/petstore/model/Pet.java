package com.petstore.model;

/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;


import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import io.restassured.response.Response;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Pet
 */
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
public class Pet {

    public Pet() {
    }

    @SerializedName("id")
    public Long id = null;

    @JsonProperty("category")
    @SerializedName("category")
    public Category category = new Category();

    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
    public class Category{
        @SerializedName("id")
        Long id = null;
        @SerializedName("name")
        String name = null ;
    }
    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
    public class Tag{
        Long id = null;
        String name = null;
        public Tag(String tag){
            this.name = tag;
        }
    }

    @SerializedName("name")
    public String name = null;

    @SerializedName("photoUrls")
    public List<String> photoUrls = new ArrayList<String>();

    @SerializedName("tags")
    public List<Tag> tags = new ArrayList<Tag>();

    /**
     * pet status in the store
     */
    public Pet(String category, String name, List<String> tags, String status){

        this.setCategory(category);
        this.setName(name);
        this.setTags(tags);
        this.setStatus(StatusEnum.fromValue(status));
    }

    /**
     * pet status in the store
     */
    public enum StatusEnum {
        available("available"),
        pending("pending"),
        sold("sold");

        public String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
    }

    @SerializedName("status")
    public StatusEnum status = null;

    public Pet id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     **/
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Pet category(Category category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     * @return category
     **/
    public Category getCategory() {
        return category;
    }

    public void setCategory(String categoryName) {
        this.category.name = categoryName;
    }

    public Pet name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * @return name
     **/
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Pet photoUrls(List<String> photoUrls) {
        this.photoUrls = photoUrls;
        return this;
    }

    public Pet addPhotoUrlsItem(String photoUrlsItem) {
        this.photoUrls.add(photoUrlsItem);
        return this;
    }

    /**
     * Get photoUrls
     * @return photoUrls
     **/
    public List<String> getPhotoUrls() {
        return photoUrls;
    }

    public void setPhotoUrls(List<String> photoUrls) {
        this.photoUrls = photoUrls;
    }

    /**
     * Get tags
     * @return tags
     **/
    public List<Tag> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        for (String tag:tags) this.tags.add(new Tag(tag));
    }

    public Pet status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * pet status in the store
     * @return status
     **/
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pet pet = (Pet) o;
        return  Objects.equals(this.id, pet.id) &&
                Objects.equals(this.category, pet.category) &&
                Objects.equals(this.name, pet.name) &&
                Objects.equals(this.photoUrls, pet.photoUrls) &&
                Objects.equals(this.tags, pet.tags) &&
                Objects.equals(this.status, pet.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, category, name, photoUrls, tags, status);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Pet {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    photoUrls: ").append(toIndentedString(photoUrls)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    public String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public JSONObject toJsonObject() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        //Converting the Object to JSONString
        String jsonString = mapper.writeValueAsString(this);
        return new JSONObject(jsonString);
    }

    public static Pet changePetStatus(Response response, String newStatus) {
        Pet pet = getPetFromSessionVariable(response);
        pet.setStatus(Pet.StatusEnum.fromValue(newStatus));
        return pet;
    }

    public static Pet getPetFromSessionVariable(Response response) {
        ObjectMapper mapper = new ObjectMapper();
        String jsonString = response.body().asString();
        Gson gson = new Gson();
        return gson.fromJson(jsonString, Pet.class);
    }

    public static List<Pet> getPetListFromSessionVariable(Response response) {
        ObjectMapper mapper = new ObjectMapper();
        String jsonString = response.body().asString();
        Gson gson = new Gson();
        return gson.fromJson(jsonString, List.class);
    }
}


